{"version":3,"sources":["webpack://canvas-game/./src/attacks/bone-elevator.ts","webpack://canvas-game/./src/attacks/bone-gap.ts","webpack://canvas-game/./src/index.ts","webpack://canvas-game/./src/objects/bone.ts","webpack://canvas-game/./src/objects/horizontal-bone.ts","webpack://canvas-game/./src/objects/player.ts","webpack://canvas-game/./src/objects/vertical-bone.ts","webpack://canvas-game/./src/structures/attack.ts","webpack://canvas-game/./src/structures/game.ts","webpack://canvas-game/./src/structures/object/game-object.ts","webpack://canvas-game/./src/structures/object/rect-bounds.ts","webpack://canvas-game/./src/structures/object/tag.ts","webpack://canvas-game/./src/structures/player/control-manager.ts","webpack://canvas-game/./src/structures/player/game-mode.ts","webpack://canvas-game/./src/structures/player/mode-controller.ts","webpack://canvas-game/./src/structures/player/modes/blue-controller.ts","webpack://canvas-game/./src/structures/player/modes/red-controller.ts","webpack://canvas-game/./src/structures/scheduler.ts","webpack://canvas-game/./src/structures/sprite-manager.ts","webpack://canvas-game/./src/assets/img/heart.png","webpack://canvas-game/./src/assets/img/horizontal-bone.png","webpack://canvas-game/./src/assets/img/vertical-bone.png","webpack://canvas-game/./src/assets/sound/hurt.mp3","webpack://canvas-game/webpack/bootstrap","webpack://canvas-game/webpack/runtime/make namespace object","webpack://canvas-game/webpack/startup"],"names":["game","duration","mode","RED","BONE_SPEED","timer","start","this","scheduler","scheduleInterval","createBones","canvas","width","height","bottomBone","instantiate","x","WIDTH","speed","HEIGHT","stop","cancelInterval","BoneElevator","BLUE","bottomPosition","topLeft","leftSide","BoneGap","Math","clamp","n","min","max","document","getElementById","oncontextmenu","e","preventDefault","stopPropagation","addAttack","sprites","load","tag","ENEMY","tick","move","bounds","getBounds","p","player","collide","hit","Bone","sprite","get","Error","y","destroy","render","ctx","imageSmoothingEnabled","drawImage","HorizontalBone","layer","SPEED","SIZE","hurtAudio","Audio","vulnerable","transparent","heart","controller","play","id","schedule","filter","hue","globalAlpha","Player","VerticalBone","options","_player","controls","attacks","_objects","update","bind","offset","requestAnimationFrame","getContext","sorted","sort","a","b","clearRect","nextAttack","length","attack","ctor","floor","random","obj","args","push","removeObject","o","Game","GameObject","endX","endY","rect","margin","undefined","self","RectBounds","other","isLeft","isRight","isAbove","isBelow","Tag","keys","Map","addEventListener","handleKeyPress","handleKeyUp","window","isKeyDown","key","set","handleBlur","clear","ControlManager","GameMode","GRAVITY","JUMP_FORCE","MAX_JUMP_TICKS","verticalSpeed","grounded","jumpTicksLeft","up","left","right","BlueController","down","RedController","schedules","intervals","_time","taskID","Array","from","entries","task","runAt","run","values","interval","fn","ticks","initialDelay","cancelSchedule","Scheduler","src","Promise","resolve","reject","Image","onload","onerror","SpriteManager","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call","r","Symbol","toStringTag","Object","defineProperty","value"],"mappings":"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","file":"js/main.c570954a.js","sourcesContent":["import HorizontalBone from '../objects/horizontal-bone';\nimport Attack from '../structures/attack';\nimport Game from '../structures/game';\nimport GameMode from '../structures/player/game-mode';\n\nclass BoneElevator extends Attack {\n\tprivate readonly BONE_SPEED = 3.5;\n\n\tprivate timer: number | null = null;\n\n\tpublic constructor(game: Game) {\n\t\tsuper(game, { duration: 600, mode: GameMode.RED });\n\t}\n\n\tpublic start() {\n\t\tthis.timer = this.game.scheduler.scheduleInterval(\n\t\t\t() => this.createBones(),\n\t\t\t40\n\t\t);\n\t}\n\n\tprivate createBones() {\n\t\tconst { width, height } = this.game.canvas;\n\n\t\tconst bottomBone = this.game.instantiate(HorizontalBone, 0, height);\n\t\tbottomBone.x = width / 2 - bottomBone.WIDTH;\n\t\tbottomBone.speed = -this.BONE_SPEED;\n\n\t\tconst topBone = this.game.instantiate(\n\t\t\tHorizontalBone,\n\t\t\twidth / 2,\n\t\t\t-bottomBone.HEIGHT\n\t\t);\n\t\ttopBone.speed = this.BONE_SPEED;\n\t}\n\n\tpublic stop() {\n\t\tif (this.timer) {\n\t\t\tthis.game.scheduler.cancelInterval(this.timer);\n\t\t}\n\t}\n}\n\nexport default BoneElevator;\n","import VerticalBone from '../objects/vertical-bone';\nimport Attack from '../structures/attack';\nimport Game from '../structures/game';\nimport GameObject from '../structures/object/game-object';\nimport GameMode from '../structures/player/game-mode';\n\nclass BoneGap extends Attack {\n\tprivate readonly BONE_SPEED = 5;\n\n\tprivate timer: number | null = null;\n\n\tpublic constructor(game: Game) {\n\t\tsuper(game, { duration: 300, mode: GameMode.BLUE });\n\t}\n\n\tpublic start() {\n\t\tthis.timer = this.game.scheduler.scheduleInterval(\n\t\t\t() => this.createBones(),\n\t\t\t45\n\t\t);\n\t}\n\n\tprivate createBones() {\n\t\tconst topPosition = 0;\n\t\tconst bottomPosition = this.game.canvas.height - 40;\n\n\t\tconst topLeft = this.game.instantiate(VerticalBone, 0, topPosition);\n\t\ttopLeft.speed = this.BONE_SPEED;\n\t\ttopLeft.x = -topLeft.WIDTH;\n\n\t\tconst bottomLeft = this.game.instantiate(\n\t\t\tVerticalBone,\n\t\t\ttopLeft.x,\n\t\t\tbottomPosition\n\t\t);\n\t\tbottomLeft.speed = this.BONE_SPEED;\n\n\t\tconst leftSide = this.game.canvas.width;\n\n\t\tconst rightTop = this.game.instantiate(VerticalBone, leftSide, topPosition);\n\t\trightTop.speed = -this.BONE_SPEED;\n\n\t\tconst bottomRight = this.game.instantiate(\n\t\t\tVerticalBone,\n\t\t\tleftSide,\n\t\t\tbottomPosition\n\t\t);\n\t\tbottomRight.speed = -this.BONE_SPEED;\n\t}\n\n\tpublic stop() {\n\t\tif (this.timer) {\n\t\t\tthis.game.scheduler.cancelInterval(this.timer);\n\t\t}\n\t}\n}\n\nexport default BoneGap;\n","import Game from './structures/game';\nimport BoneElevator from './attacks/bone-elevator';\nimport HorizontalBoneSprite from './assets/img/horizontal-bone.png';\nimport VerticalBoneSprite from './assets/img/vertical-bone.png';\nimport HeartSprite from './assets/img/heart.png';\nimport './index.css';\nimport BoneGap from './attacks/bone-gap';\n\nMath.clamp = function (n, min, max) {\n\treturn Math.max(min, Math.min(n, max));\n};\n\nconst canvas = document.getElementById('game') as HTMLCanvasElement;\n\ncanvas.oncontextmenu = e => {\n\te.preventDefault();\n\te.stopPropagation();\n};\n\nconst game = new Game(canvas);\ngame.addAttack(BoneElevator);\ngame.addAttack(BoneGap);\n\n(async () => {\n\tawait game.sprites.load('heart', HeartSprite);\n\tawait game.sprites.load('horizontalBone', HorizontalBoneSprite);\n\tawait game.sprites.load('verticalBone', VerticalBoneSprite);\n\n\tgame.start();\n})();\n","import Game from '../structures/game';\nimport GameObject from '../structures/object/game-object';\nimport Tag from '../structures/object/tag';\n\nabstract class Bone extends GameObject {\n\tpublic speed = 0;\n\n\tpublic constructor(game: Game) {\n\t\tsuper(game, { tag: Tag.ENEMY });\n\t}\n\n\tpublic tick() {\n\t\tthis.move();\n\n\t\tconst bounds = this.getBounds();\n\t\tconst p = this.game.player;\n\n\t\tif (p?.getBounds().collide(bounds, 3)) {\n\t\t\tp.hit();\n\t\t}\n\t}\n\n\tprotected abstract move(): void;\n}\n\nexport default Bone;\n","import Game from '../structures/game';\nimport RectBounds from '../structures/object/rect-bounds';\nimport Bone from './bone';\n\nclass HorizontalBone extends Bone {\n\tpublic readonly WIDTH = 200;\n\tpublic readonly HEIGHT;\n\n\tprivate readonly sprite: HTMLImageElement;\n\n\tpublic constructor(game: Game) {\n\t\tsuper(game);\n\n\t\tconst sprite = game.sprites.get('horizontalBone');\n\t\tif (!sprite) throw new Error('Horizontal bone sprite missing');\n\n\t\tthis.sprite = sprite;\n\n\t\tthis.HEIGHT = sprite.height * (this.WIDTH / sprite.width);\n\t}\n\n\tpublic move() {\n\t\tthis.y += this.speed;\n\n\t\tif (\n\t\t\t(this.y < -this.HEIGHT && this.speed < 0) ||\n\t\t\t(this.y > this.game.canvas.height && this.speed > 0)\n\t\t) {\n\t\t\tthis.destroy();\n\t\t}\n\t}\n\n\tpublic render(ctx: CanvasRenderingContext2D) {\n\t\tctx.imageSmoothingEnabled = false;\n\t\tctx.drawImage(this.sprite, this.x, this.y, this.WIDTH, this.HEIGHT);\n\t}\n\n\tpublic getBounds() {\n\t\treturn new RectBounds(this.x, this.y, this.WIDTH, this.HEIGHT);\n\t}\n}\n\nexport default HorizontalBone;\n","import Game from '../structures/game';\nimport GameObject from '../structures/object/game-object';\nimport HurtAudio from '../assets/sound/hurt.mp3';\nimport RectBounds from '../structures/object/rect-bounds';\nimport GameMode from '../structures/player/game-mode';\nimport Tag from '../structures/object/tag';\n\nclass Player extends GameObject {\n\tpublic readonly SPEED = 4;\n\tpublic readonly SIZE = 25;\n\n\tprivate readonly sprite;\n\tprivate readonly hurtAudio = new Audio(HurtAudio);\n\n\tprivate vulnerable = true;\n\tprivate transparent = false;\n\n\tpublic mode = GameMode.RED;\n\n\tpublic constructor(game: Game) {\n\t\tsuper(game, { layer: 10 });\n\n\t\tconst { width, height } = game.canvas;\n\t\tthis.x = width / 2 - this.SIZE / 2;\n\t\tthis.y = height / 2 - this.SIZE / 2;\n\n\t\tconst heart = game.sprites.get('heart');\n\t\tif (!heart) throw new Error('Heart sprite missing');\n\n\t\tthis.sprite = heart;\n\t}\n\n\tpublic tick() {\n\t\tthis.mode.controller.tick(this);\n\t}\n\n\tpublic hit() {\n\t\tif (!this.vulnerable) return;\n\n\t\tthis.vulnerable = false;\n\t\tthis.transparent = true;\n\t\tthis.hurtAudio.play();\n\n\t\tconst { scheduler } = this.game;\n\n\t\tconst id = scheduler.scheduleInterval(() => {\n\t\t\tthis.transparent = !this.transparent;\n\t\t}, 10);\n\n\t\tscheduler.schedule(() => {\n\t\t\tscheduler.cancelInterval(id);\n\n\t\t\tthis.vulnerable = true;\n\t\t\tthis.transparent = false;\n\t\t}, 60);\n\t}\n\n\tpublic render(ctx: CanvasRenderingContext2D) {\n\t\tctx.imageSmoothingEnabled = false;\n\n\t\tctx.filter = `hue-rotate(${this.mode.hue}deg)`;\n\n\t\tif (this.transparent) ctx.globalAlpha = 0.5;\n\n\t\tctx.drawImage(this.sprite, this.x, this.y, this.SIZE, this.SIZE);\n\n\t\tctx.filter = 'none';\n\t\tctx.globalAlpha = 1;\n\t}\n\n\tpublic getBounds() {\n\t\treturn new RectBounds(this.x, this.y, this.SIZE, this.SIZE);\n\t}\n}\n\nexport default Player;\n","import Game from '../structures/game';\nimport RectBounds from '../structures/object/rect-bounds';\nimport Tag from '../structures/object/tag';\nimport Bone from './bone';\n\nclass VerticalBone extends Bone {\n\tpublic readonly HEIGHT = 200;\n\tpublic readonly WIDTH;\n\n\tprivate readonly sprite: HTMLImageElement;\n\n\tpublic constructor(game: Game) {\n\t\tsuper(game);\n\n\t\tconst sprite = game.sprites.get('verticalBone');\n\t\tif (!sprite) throw new Error('Vertical bone sprite missing');\n\n\t\tthis.WIDTH = sprite.width * (this.HEIGHT / sprite.height);\n\n\t\tthis.sprite = sprite;\n\t}\n\n\tpublic move() {\n\t\tthis.x += this.speed;\n\n\t\tif (\n\t\t\t(this.x < -this.WIDTH && this.speed < 0) ||\n\t\t\t(this.x > this.game.canvas.width && this.speed > 0)\n\t\t) {\n\t\t\tthis.destroy();\n\t\t}\n\t}\n\n\tpublic render(ctx: CanvasRenderingContext2D) {\n\t\tctx.imageSmoothingEnabled = false;\n\t\tctx.drawImage(this.sprite, this.x, this.y, this.WIDTH, this.HEIGHT);\n\t}\n\n\tpublic getBounds() {\n\t\treturn new RectBounds(this.x, this.y, this.WIDTH, this.HEIGHT);\n\t}\n}\n\nexport default VerticalBone;\n","import Game from './game';\nimport GameMode from './player/game-mode';\n\nexport interface AttackOptions {\n\tduration: number;\n\tmode: GameMode;\n}\n\nabstract class Attack {\n\tpublic readonly duration: number;\n\tpublic readonly mode: GameMode;\n\n\tpublic constructor(protected readonly game: Game, options: AttackOptions) {\n\t\tthis.duration = options.duration;\n\t\tthis.mode = options.mode;\n\t}\n\n\tpublic abstract start(): void;\n\tpublic abstract stop(): void;\n}\n\nexport default Attack;\n","import Player from '../objects/player';\nimport Attack from './attack';\nimport ControlManager from './player/control-manager';\nimport GameObject from './object/game-object';\nimport Scheduler from './scheduler';\nimport SpriteManager from './sprite-manager';\n\ntype AttackConstructor = new (game: Game) => Attack;\n\nclass Game {\n\tprivate _player: Player | null = null;\n\tpublic readonly controls = new ControlManager();\n\tpublic readonly scheduler = new Scheduler();\n\tpublic readonly sprites = new SpriteManager();\n\n\tprivate readonly attacks: AttackConstructor[] = [];\n\tprivate _objects: GameObject[] = [];\n\n\tpublic constructor(public readonly canvas: HTMLCanvasElement) {\n\t\tthis.update = this.update.bind(this);\n\t}\n\n\tpublic start() {\n\t\tconst { width, height } = this.canvas;\n\t\tthis._player = this.instantiate(Player, width / 2, height / 2);\n\n\t\tconst offset = this._player.SIZE / 2;\n\t\tthis._player.x -= offset;\n\t\tthis._player.y -= offset;\n\n\t\trequestAnimationFrame(this.update);\n\t\tthis.scheduler.schedule(() => this.nextAttack(), 60);\n\t}\n\n\tprivate update() {\n\t\tthis.scheduler.tick();\n\n\t\t// Tick objects\n\t\tfor (const obj of this._objects) {\n\t\t\tobj.tick(this);\n\t\t}\n\n\t\tconst { width, height } = this.canvas;\n\t\tconst ctx = this.canvas.getContext('2d')!;\n\n\t\t// Render objects\n\t\tconst sorted = this._objects.sort(\n\t\t\t(a, b) => (a.options.layer || 0) - (b.options.layer || 0)\n\t\t);\n\t\tctx.clearRect(0, 0, width, height);\n\n\t\tfor (const obj of sorted) {\n\t\t\tobj.render(ctx);\n\t\t}\n\n\t\trequestAnimationFrame(this.update);\n\t}\n\n\tprivate nextAttack() {\n\t\tif (!this.attacks.length || !this._player) return;\n\n\t\tconst ctor = this.attacks[Math.floor(Math.random() * this.attacks.length)];\n\t\tconst attack = new ctor(this);\n\n\t\tthis._player.mode = attack.mode;\n\t\tattack.start();\n\n\t\tthis.scheduler.schedule(() => {\n\t\t\tattack.stop();\n\t\t\tthis.scheduler.schedule(() => this.nextAttack(), 60);\n\t\t}, attack.duration);\n\t}\n\n\tpublic instantiate<T extends GameObject, A extends any[]>(\n\t\tctor: new (game: Game, ...args: A) => T,\n\t\tx: number,\n\t\ty: number,\n\t\t...args: A\n\t): T {\n\t\tconst obj = new ctor(this, ...args);\n\t\tobj.x = x;\n\t\tobj.y = y;\n\n\t\tthis._objects.push(obj);\n\t\treturn obj;\n\t}\n\n\tpublic addAttack(ctor: AttackConstructor) {\n\t\tthis.attacks.push(ctor);\n\t}\n\n\tpublic removeObject(obj: GameObject) {\n\t\tthis._objects = this._objects.filter(o => o !== obj);\n\t}\n\n\tpublic get objects(): ReadonlyArray<GameObject> {\n\t\treturn this._objects;\n\t}\n\n\tpublic get player() {\n\t\treturn this._player;\n\t}\n}\n\nexport default Game;\n","import Game from '../game';\nimport RectBounds from './rect-bounds';\nimport Tag from './tag';\n\nexport interface ObjectOptions {\n\tlayer?: number;\n\ttag?: Tag;\n}\n\nabstract class GameObject {\n\tpublic x = 0;\n\tpublic y = 0;\n\n\tpublic constructor(\n\t\tpublic readonly game: Game,\n\t\tpublic readonly options: Readonly<ObjectOptions> = {}\n\t) {}\n\n\tpublic abstract tick(game: Game): void;\n\tpublic abstract render(ctx: CanvasRenderingContext2D): void;\n\tpublic abstract getBounds(): RectBounds;\n\n\tpublic destroy() {\n\t\tthis.game.removeObject(this);\n\t}\n}\n\nexport default GameObject;\n","class RectBounds {\n\tpublic endX: number;\n\tpublic endY: number;\n\n\tpublic constructor(\n\t\tpublic x: number,\n\t\tpublic y: number,\n\t\tpublic width: number,\n\t\tpublic height: number\n\t) {\n\t\tthis.endX = x + width;\n\t\tthis.endY = y + height;\n\t}\n\n\tpublic collide(rect: RectBounds, margin?: number): boolean {\n\t\tif (margin !== undefined) {\n\t\t\tconst self = new RectBounds(\n\t\t\t\tthis.x + margin,\n\t\t\t\tthis.y + margin,\n\t\t\t\tthis.width - margin * 2,\n\t\t\t\tthis.height - margin * 2\n\t\t\t);\n\t\t\tconst other = new RectBounds(\n\t\t\t\trect.x + margin,\n\t\t\t\trect.y + margin,\n\t\t\t\trect.width - margin * 2,\n\t\t\t\trect.height - margin * 2\n\t\t\t);\n\n\t\t\treturn self.collide(other);\n\t\t}\n\n\t\tconst isLeft = this.endX < rect.x;\n\t\tconst isRight = this.x > rect.endX;\n\t\tconst isAbove = this.endY < rect.y;\n\t\tconst isBelow = this.y > rect.endY;\n\n\t\treturn !isLeft && !isRight && !isAbove && !isBelow;\n\t}\n}\n\nexport default RectBounds;\n","enum Tag {\n\tPLAYER,\n\tNEUTRAL,\n\tENEMY,\n}\n\nexport default Tag;\n","class ControlManager {\n\tprivate readonly keys = new Map<string, boolean>();\n\n\tpublic constructor() {\n\t\tdocument.addEventListener('keydown', e => this.handleKeyPress(e));\n\t\tdocument.addEventListener('keyup', e => this.handleKeyUp(e));\n\t\twindow.addEventListener('blur', () => this.handleBlur());\n\t}\n\n\tpublic isKeyDown(key: string): boolean {\n\t\treturn this.keys.get(key) ?? false;\n\t}\n\n\tprivate handleKeyPress(e: KeyboardEvent) {\n\t\tthis.keys.set(e.key, true);\n\t}\n\n\tprivate handleKeyUp(e: KeyboardEvent) {\n\t\tthis.keys.set(e.key, false);\n\t}\n\n\tprivate handleBlur() {\n\t\tthis.keys.clear();\n\t}\n}\n\nexport default ControlManager;\n","import ModeController from './mode-controller';\nimport RedController from './modes/red-controller';\nimport BlueController from './modes/blue-controller';\n\nclass GameMode {\n\tpublic static RED = new GameMode(0, new RedController());\n\tpublic static BLUE = new GameMode(240, new BlueController());\n\n\tprivate constructor(\n\t\tpublic readonly hue: number,\n\t\tpublic readonly controller: ModeController\n\t) {}\n}\n\nexport default GameMode;\n","import Player from '../../objects/player';\n\nabstract class ModeController {\n\tpublic abstract tick(player: Player): void;\n}\n\nexport default ModeController;\n","import Player from '../../../objects/player';\nimport ModeController from '../mode-controller';\n\nclass BlueController extends ModeController {\n\tprivate readonly GRAVITY = 0.23;\n\tprivate readonly JUMP_FORCE = 6;\n\tprivate readonly MAX_JUMP_TICKS = 15;\n\n\tprivate verticalSpeed = 0;\n\tprivate grounded = false;\n\tprivate jumpTicksLeft = 0;\n\n\tpublic tick(player: Player) {\n\t\tconst {\n\t\t\tgame: { controls, canvas },\n\t\t\tSPEED,\n\t\t\tSIZE,\n\t\t} = player;\n\n\t\tconst up = controls.isKeyDown('ArrowUp') || controls.isKeyDown('w');\n\t\tconst left = controls.isKeyDown('ArrowLeft') || controls.isKeyDown('a');\n\t\tconst right = controls.isKeyDown('ArrowRight') || controls.isKeyDown('d');\n\n\t\tif (left) player.x -= SPEED;\n\t\tif (right) player.x += SPEED;\n\n\t\tif (!this.grounded) {\n\t\t\tthis.verticalSpeed += this.GRAVITY;\n\t\t}\n\n\t\tplayer.y += this.verticalSpeed;\n\n\t\tif (player.y >= canvas.height - SIZE) {\n\t\t\tthis.grounded = true;\n\t\t}\n\n\t\tif (up) {\n\t\t\tif (this.grounded) {\n\t\t\t\tthis.jumpTicksLeft = this.MAX_JUMP_TICKS;\n\t\t\t\tthis.grounded = false;\n\t\t\t}\n\n\t\t\tif (this.jumpTicksLeft > 0) {\n\t\t\t\tthis.verticalSpeed = -this.JUMP_FORCE;\n\t\t\t\tthis.jumpTicksLeft--;\n\t\t\t}\n\t\t} else if (this.jumpTicksLeft > 0) {\n\t\t\tthis.verticalSpeed = -(this.MAX_JUMP_TICKS - this.jumpTicksLeft) * 0.2;\n\t\t\tthis.jumpTicksLeft = 0;\n\t\t}\n\n\t\tplayer.x = Math.clamp(player.x, 0, canvas.width - SIZE);\n\t\tplayer.y = Math.clamp(player.y, 0, canvas.height - SIZE);\n\t}\n}\n\nexport default BlueController;\n","import Player from '../../../objects/player';\nimport ModeController from '../mode-controller';\n\nclass RedController extends ModeController {\n\tpublic tick(player: Player) {\n\t\tconst {\n\t\t\tgame: { controls, canvas },\n\t\t\tSPEED,\n\t\t\tSIZE,\n\t\t} = player;\n\n\t\tconst up = controls.isKeyDown('ArrowUp') || controls.isKeyDown('w');\n\t\tconst left = controls.isKeyDown('ArrowLeft') || controls.isKeyDown('a');\n\t\tconst down = controls.isKeyDown('ArrowDown') || controls.isKeyDown('s');\n\t\tconst right = controls.isKeyDown('ArrowRight') || controls.isKeyDown('d');\n\n\t\tif (up) player.y -= SPEED;\n\t\tif (left) player.x -= SPEED;\n\t\tif (down) player.y += SPEED;\n\t\tif (right) player.x += SPEED;\n\n\t\tplayer.x = Math.clamp(player.x, 0, canvas.width - SIZE);\n\t\tplayer.y = Math.clamp(player.y, 0, canvas.height - SIZE);\n\t}\n}\n\nexport default RedController;\n","type Runnable = () => void;\n\nexport interface Task {\n\trun: Runnable;\n\trunAt: number;\n}\n\nexport interface IntervalTask extends Task {\n\tinterval: number;\n}\n\nclass Scheduler {\n\tprivate schedules = new Map<number, Task>();\n\tprivate intervals = new Map<number, IntervalTask>();\n\n\tprivate _time = 0;\n\tprivate taskID = 1;\n\n\tpublic tick() {\n\t\tthis._time++;\n\n\t\tconst tasks = Array.from(this.schedules.entries());\n\t\tfor (const [id, task] of tasks) {\n\t\t\tif (this._time < task.runAt) continue;\n\n\t\t\ttask.run();\n\t\t\tthis.schedules.delete(id);\n\t\t}\n\n\t\tconst intervalTasks = Array.from(this.intervals.values());\n\t\tfor (const task of intervalTasks) {\n\t\t\tif (this._time < task.runAt) continue;\n\n\t\t\ttask.run();\n\t\t\ttask.runAt += task.interval;\n\t\t}\n\t}\n\n\tpublic schedule(fn: Runnable, ticks: number): number {\n\t\tthis.taskID++;\n\n\t\tconst task: Task = {\n\t\t\trun: fn,\n\t\t\trunAt: this._time + ticks,\n\t\t};\n\n\t\tthis.schedules.set(this.taskID, task);\n\t\treturn this.taskID;\n\t}\n\n\tpublic scheduleInterval(fn: Runnable, interval: number): number;\n\tpublic scheduleInterval(\n\t\tfn: Runnable,\n\t\tinitialDelay: number,\n\t\tinterval: number\n\t): number;\n\tpublic scheduleInterval(\n\t\tfn: Runnable,\n\t\tinitialDelay: number,\n\t\tinterval?: number\n\t): number {\n\t\tthis.taskID++;\n\n\t\tconst task: IntervalTask = {\n\t\t\trun: fn,\n\t\t\tinterval: interval ?? initialDelay,\n\t\t\trunAt: this._time + initialDelay,\n\t\t};\n\n\t\tthis.intervals.set(this.taskID, task);\n\t\treturn this.taskID;\n\t}\n\n\tpublic cancelSchedule(id: number) {\n\t\treturn this.schedules.delete(id);\n\t}\n\n\tpublic cancelInterval(id: number) {\n\t\treturn this.intervals.delete(id);\n\t}\n\n\tpublic get time() {\n\t\treturn this._time;\n\t}\n}\n\nexport default Scheduler;\n","class SpriteManager {\n\tprivate readonly sprites = new Map<string, HTMLImageElement>();\n\n\tpublic load(key: string, src: string) {\n\t\treturn new Promise<HTMLImageElement>((resolve, reject) => {\n\t\t\tconst sprite = new Image();\n\t\t\tsprite.src = src;\n\n\t\t\tsprite.onload = () => {\n\t\t\t\tthis.sprites.set(key, sprite);\n\t\t\t\tresolve(sprite);\n\t\t\t};\n\t\t\tsprite.onerror = e => reject(e);\n\t\t});\n\t}\n\n\tpublic get(key: string) {\n\t\treturn this.sprites.get(key);\n\t}\n}\n\nexport default SpriteManager;\n","export default \"/canvas-game/assets/img/heart.png\";","export default \"/canvas-game/assets/img/horizontal-bone.png\";","export default \"/canvas-game/assets/img/vertical-bone.png\";","export default \"/canvas-game/assets/sound/hurt.mp3\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(56);\n"],"sourceRoot":""}